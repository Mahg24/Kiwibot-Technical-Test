import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { error, log } from 'console';
const { Configuration, OpenAIApi } = require('openai');
@Injectable()
export class OpenAiService {
  private configuration;
  constructor(private configService: ConfigService) {
    this.configuration = new Configuration({
      apiKey: configService.get<string>('openai_api_key'),
    });
  }

  /**
   * This is an async function that extracts data using OpenAI's prompt and returns the result or an
   * error message.
   * @param {string} problem - The "problem" parameter is a string that represents the problem or task
   * for which data extraction is required. It is used as input to the OpenAI API to generate a prompt
   * for data extraction.
   * @returns the result of the AI completion if it is successful, or an error message if there is an
   * AI error.
   */
  async dataExtraction(problem: string) {
    const prompt = `${this.configService.get<string>(
      'openai_prompt_data_extraction',
    )}"${problem}"`;
    const result = await this.createCompletion(prompt);
    if (result) {
      return result;
    } else {
      return {
        error: 'AI error please try again',
      };
    }
  }

  /**
   * This is a TypeScript function that creates a completion using the OpenAI API with specific
   * parameters and returns the result as a parsed JSON object.
   * @param prompt - The text prompt that will be used as input for the OpenAI model to generate a
   * completion.
   * @returns the result of the OpenAI API completion, which is a JSON object parsed from the text
   * generated by the API. If there is an error, it returns null.
   */
  private async createCompletion(prompt) {
    const openai = new OpenAIApi(this.configuration);
    try {
      const completion = await openai.createCompletion({
        model: this.configService.get<string>('openai_model'),
        prompt,
        temperature: 0.7,
        max_tokens: 170,
        top_p: 1.0,
        frequency_penalty: 0.0,
        presence_penalty: 0.0,
      });
      const result = completion.data.choices[0].text.replace(
        /(\r\n|\n|\r)/gm,
        '',
      );
      return JSON.parse(result);
    } catch (e) {
      error(e);
      return null;
    }
  }
}
